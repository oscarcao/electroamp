import { app, BrowserWindow, ipcMain, screen } from 'electron';
import path from 'path'
import type { WebContents } from 'electron'
import { isDev } from'./helpers'
import { getStateFromFile } from './webamp/state'

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  const { width, height } = screen.getPrimaryDisplay().workAreaSize
  // Create the browser window.
  const win = new BrowserWindow({
    x: 0,
    y: 0,
    width,
    height,
    icon: path.join(app.getAppPath(),'icons/icon.png'),
    backgroundColor: '#0000',
    transparent: true,
    frame: false,
    hasShadow: false,
    maximizable: false,
    movable: false,
    resizable: false,
    show: false,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
    }
  })

  // and load the index.html of the app.
  win.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  if(isDev)
    win.webContents.openDevTools({
      mode: 'undocked'
    })
  
  win.once('ready-to-show', () => win.show())
  win.setIgnoreMouseEvents(true, { forward: true })

  screen.on('display-metrics-changed', () => {
    const { width, height } = screen.getPrimaryDisplay().workAreaSize
    win.setSize(width, height)
  })
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {

  /*
  *
  * Given saving of webamp state is not implemented. There's no need to force user
  * to run app from Applications folder.
  *
  if(!app.isInApplicationsFolder() && !isDev) {
    app.moveToApplicationsFolder({
      conflictHandler: (conflictType) => {
        if (conflictType === 'exists') {
          return dialog.showMessageBoxSync({
            type: 'question',
            buttons: ['Cancel', 'OK'],
            defaultId: 0,
            message: 'An app with this name already exists. Replace existing app?'
          }) === 1
        }
        if (conflictType === 'existsAndRunning') {
          return dialog.showMessageBoxSync({
            type: 'question',
            buttons: ['Cancel', 'OK'],
            defaultId: 0,
            message: 'An app with this name is already running. Quit and replace existing app?'
          }) === 1
        }
      }
    })
  }
  */

  ipcMain.handle('webamp-load-state', getStateFromFile)

  createWindow()
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

app.on('web-contents-created', (event: Event, contents: WebContents) => {
  // Prevent all navigation for security reasons
  // See https://github.com/electron/electron/blob/master/docs/tutorial/security.md#13-disable-or-limit-navigation
  contents.on('will-navigate', (event) => event.preventDefault())
  // Prevent new window creation for security reasons
  // See https://github.com/electron/electron/blob/master/docs/tutorial/security.md#14-disable-or-limit-creation-of-new-windows
  contents.setWindowOpenHandler(() => ({ action: 'deny' }))
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
ipcMain.on('set-ignore-mouse-events', (event, val) => {
  const win = BrowserWindow.fromWebContents(event.sender)
  win?.setIgnoreMouseEvents(val, { forward: true })
})

ipcMain.on('minimize-app', (event) => {
  const win = BrowserWindow.fromWebContents(event.sender)
  win?.minimize()
})

ipcMain.on('close-app', (event) => {
  const win = BrowserWindow.fromWebContents(event.sender)
  win?.close()
})
